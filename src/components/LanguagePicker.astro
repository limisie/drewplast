---
import { getCurrentUrl, getLocalizedUrlList } from "@i18n/urls";
import { defaultLocale, languages, locales } from "@i18n/ui";

import LabeledIcon from "@components/LabeledIcon.astro";

const locale = Astro.currentLocale || defaultLocale;
const currentPath = getCurrentUrl(Astro.params);
const relativeLocalePaths = getLocalizedUrlList(locale, currentPath);
---

<div class="dropdown">
  <button type="button" class="dropdown-button navlink" aria-expanded="false">
    <LabeledIcon iconName="akar-icons:globe" text={locale} />
  </button>
  <ul class="dropdown-menu">
    {
      locales.map((locale) => (
        <li class="navlink">
          <a href={relativeLocalePaths[locale]} title={languages[locale]}>
            {locale}
          </a>
        </li>
      ))
    }
  </ul>
</div>

<style>
  .dropdown {
    position: relative;
  }

  .dropdown-menu {
    position: absolute;
    inset-inline: calc(-1 * var(--cell-block-padding));

    background-color: var(--clr-background);
    border: 1px solid var(--light-grey);
    border-top: none;

    transition:
      top 0.3s ease,
      opacity 0.3s ease,
      visibility 0.3s;

    li {
      text-align: center;
      margin-block: var(--spacer);
    }
  }

  button[aria-expanded="false"] + .dropdown-menu {
    top: 50%;
    opacity: 0;
    visibility: hidden;
  }

  button[aria-expanded="true"] + .dropdown-menu {
    top: 100%;
    opacity: 1;
    visibility: visible;
  }
</style>

<script>
  const dropdownButton = document.querySelector(".dropdown-button");

  const toggleElement = (element, toggleOn) => {
    toggleOn ??= element.getAttribute("aria-expanded") === "false";
    element.setAttribute("aria-expanded", toggleOn);
  };

  dropdownButton?.addEventListener("click", () =>
    toggleElement(dropdownButton, null)
  );
</script>
