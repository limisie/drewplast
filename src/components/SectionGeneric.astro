---
import { getRelativeLocaleUrl } from "astro:i18n";
import { getLocalizedLink } from "@lib/data";
import { getDynamicImageData } from "@lib/imageImport";
import { defaultLocale } from "@i18n/ui";

import LabeledIcon from "@components/LabeledIcon.astro";

const {
  title,
  description,
  pageLink,
  backgroundImage,
  sectionLink = "",
  id = "",
  class: classes,
} = Astro.props;
const locale = Astro.currentLocale || defaultLocale;

const imageData =
  backgroundImage && (await getDynamicImageData(backgroundImage, locale));

const pageLinkData =
  pageLink && (await getLocalizedLink(pageLink.page, locale));

const hasSlotContent = !!Astro.slots.default;
---

<section
  class:list={[classes?.section]}
  style={backgroundImage && `background-image: url('${imageData.src}')`}
  id={id}
>
  <div class:list={["content", classes?.content]}>
    <h2 class="content__title">{title}</h2>
    {
      description && (
        <div class="content__description flow-content">
          {description.split("\n").map((paragraph: string) => (
            <p>{paragraph}</p>
          ))}
        </div>
      )
    }
    {
      pageLink && (
        <div class="content__link">
          <a
            href={`${getRelativeLocaleUrl(locale, pageLinkData.url)}${sectionLink && `#${sectionLink}`}`}
          >
            <LabeledIcon
              iconName="akar-icons:arrow-right"
              text={pageLink.text}
              isLeft={false}
              isAnimated={true}
              class="navlink"
            />
          </a>
        </div>
      )
    }
    {
      hasSlotContent && (
        <div class="content__slot flow-content">
          <slot />
        </div>
      )
    }
  </div>
</section>

<style>
  section {
    background-repeat: no-repeat;
    background-size: cover;
    background-position: center;
  }

  .content {
    display: grid;
    gap: var(--spacer-responsive);
    grid-template-columns: minmax(
      0rem,
      1fr
    ); /* fix for overflowing grid item */

    .content__description {
      align-self: center;
    }

    .content__slot {
      --flow-spacer: var(--spacer-responsive);
    }
  }

  .content--background {
    gap: var(--spacer);

    background-color: var(--clr-background);
    padding: var(--section-padding) var(--spacer-responsive);
    margin-left: var(--content-margin);
  }

  .content--list {
    row-gap: var(--spacer);

    .content__title {
      order: 1;
    }

    .content__description {
      order: 2;
      align-self: start;
    }

    .content__slot {
      order: 3;
    }

    .content__link {
      order: 4;
    }
  }

  .content--link,
  .content--background {
    .content__link {
      justify-self: end;
      text-align: end;
    }
  }

  @media (min-width: 48rem) {
    .content--description {
      grid-template-columns: 1fr 1fr;
      column-gap: var(--spacer);

      .content__slot {
        grid-column: span 2;
      }
    }

    .content--list {
      grid-template-columns: 1fr minmax(0rem, 3fr); /* fix for overflowing grid item */
      grid-template-rows: auto 1fr auto;

      .content__slot {
        grid-row: span 3;
        grid-column: span 1;
        order: 2;
      }

      .content__description {
        order: 3;
      }
    }

    .content--background {
      width: 50vw;

      &.breakout--right {
        padding-inline: var(--section-padding) var(--content-margin);
        margin-left: calc(50vw - var(--content-margin));
      }

      &.breakout--left {
        padding-inline: var(--content-margin) var(--section-padding);
        margin-left: 0;
      }
    }

    .content--link {
      grid-template-columns: 1fr 1fr;

      .content__description {
        grid-row: span 2;
        order: 1;
      }

      .content__title {
        order: 2;
      }

      .content__link {
        order: 3;
      }

      .content__title,
      .content__link {
        justify-self: end;
        text-align: end;
      }
    }

    .content--application {
      grid-template-columns: 1fr 1fr;

      .content__title {
        grid-column: span 2;
      }
    }
  }
</style>
