---
import { getRelativeLocaleUrl } from "astro:i18n";
import { getLocalizedLink } from "@lib/data";
import { getDynamicImageData } from "@lib/imageImport";
import { defaultLocale } from "@i18n/ui";

import LabeledIcon from "@components/LabeledIcon.astro";

const {
  title,
  description,
  pageLink,
  backgroundImage,
  class: classes,
} = Astro.props;
const locale = Astro.currentLocale || defaultLocale;

const imageData =
  backgroundImage && (await getDynamicImageData(backgroundImage, locale));

const pageLinkData =
  pageLink && (await getLocalizedLink(pageLink.page, locale));

const hasSlotContent = !!Astro.slots.default;
---

<section
  class:list={[classes?.section]}
  style={backgroundImage && `background-image: url('${imageData.src}')`}
>
  <div class:list={[classes?.content]}>
    <h2 id="title">{title}</h2>
    {
      description && (
        <div id="description" class="flow-content">
          {description.split("\n").map((paragraph: string) => (
            <p>{paragraph}</p>
          ))}
        </div>
      )
    }
    {
      pageLink && (
        <div id="link">
          <a href={getRelativeLocaleUrl(locale, pageLinkData.url)}>
            <LabeledIcon
              iconName="akar-icons:arrow-right"
              text={pageLink.text}
              isLeft={false}
              isAnimated={true}
              class="navlink"
            />
          </a>
        </div>
      )
    }
    {
      hasSlotContent && (
        <div id="content">
          <slot />
        </div>
      )
    }
  </div>
</section>

<style>
  section {
    background-repeat: no-repeat;
    background-size: cover;
    background-position: center;
  }

  #title {
    grid-area: title;
  }

  #description {
    grid-area: description;
  }

  #content {
    grid-area: content;
    overflow: hidden;
  }

  #link {
    grid-area: link;
  }

  [class*="-section"] {
    display: grid;
    gap: var(--spacer-responsive);
    align-items: center;
  }

  .description-section,
  .general-section {
    grid-template-areas:
      "title"
      "description"
      "content";
  }

  .list-section,
  .link-section {
    grid-template-areas:
      "title"
      "description"
      "content"
      "link";
  }

  .background-section {
    grid-template-areas:
      "title"
      "description"
      "link";

    background-color: var(--clr-background);

    padding: var(--section-padding) var(--spacer-responsive);
    margin-left: var(--content-margin);
  }

  @media (min-width: 48rem) {
    [class*="-section"] {
      gap: var(--spacer) var(--spacer-responsive);
    }

    .description-section {
      grid-template-areas:
        "title description"
        "content content";
      grid-template-columns: 1fr 1fr;
      gap: calc(1.5 * var(--spacer-responsive)) var(--spacer);
    }

    .list-section {
      grid-template-areas:
        "title content"
        "description content"
        "link content";
      grid-template-columns: 1fr 3fr;
      grid-template-rows: auto 1fr auto;
    }

    .background-section {
      width: 50vw;

      &.breakout-right {
        padding-inline: var(--section-padding) var(--content-margin);
        margin-left: calc(50vw - var(--content-margin));
      }

      &.breakout-left {
        padding-inline: var(--content-margin) var(--section-padding);
        margin-left: 0;
      }
    }

    .link-section {
      grid-template-areas:
        "description title"
        "description link";
      grid-template-columns: 1fr 1fr;

      #title,
      #link {
        justify-self: end;
        text-align: end;
      }
    }
  }
</style>
